package rs.ac.bg.etf.pp1;

import java.util.LinkedList;
import java.util.List;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.test.CompilerError;

parser code {:
    public List<CompilerError> errors = new LinkedList<>();

    private Logger log = Logger.getLogger(getClass());

    public boolean errorDetected;

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) { }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;

        int line = -1;

        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            line = ((Symbol)info).left;
            msg.append(" na liniji: ").append(line);
        }

        log.error(msg.toString());
        errors.add(new CompilerError(line, message, CompilerError.CompilerErrorType.SYNTAX_ERROR));
    }

    public void report_error(String message, int line) {
        errorDetected = true;

        log.error(message + " na liniji: " + line);
        errors.add(new CompilerError(line, message, CompilerError.CompilerErrorType.SYNTAX_ERROR));
    }
:}

init with {:
    errorDetected = false;
:}

scan with {:
    Symbol s = this.getScanner().next_token();

    if (s != null && s.value != null) {
        //log.info(s.toString() + " " + s.value.toString());
    }

    return s;
:}


terminal PROG, NEW, CONST;
terminal READ, PRINT, RETURN, VOID;
terminal DO, WHILE, BREAK, CONTINUE, IF, ELSE;
terminal SWITCH, CASE, YIELD, DEFAULT;
terminal ASSIGN, PLUS, MINUS, MULTIPLE, DIVIDE, MODULO, INCREMENT, DECREMENT;
terminal AND, OR, EQ, NEQ, GT, LT, GEQ, LEQ;
terminal COLON, SEMI, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

terminal Integer NUMBER, BOOLLIT;
terminal Character CHARLIT;
terminal String IDENT;

nonterminal Program, VarConstDecls;
nonterminal VarConstDecl, VarDecl, VarNames, VarName;
nonterminal ConstDecl, ConstAssigns, ConstAssign;
nonterminal MethodDecls, MethodDecl, ReturnType, FormPars, FormPar, FormParMore, MethodVarDecls, Statements;
nonterminal Statement, Matched, Unmatched, PrintArg, WhileStart, Semi, DesignatorStatement, ActPars, ActParsMore, ActPar, IfStart, Else;
nonterminal Negation, Addop, Mulop;
nonterminal Condition, CondTerm, And, Or, Relop;
nonterminal SwitchStart, Cases, Case, CaseStart, DefaultStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodTypeName, Designator, ArrayName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct AssignmentStatement, Type, Expr, Terms, Term, Factor, MethodCall;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact;

Program ::= (Program) PROG ProgName:progName VarConstDecls LBRACE MethodDecls RBRACE
          ;

ProgName ::= (ProgName) IDENT:progName
           ;

VarConstDecls ::= (VarConstDeclList) VarConstDecls VarConstDecl
                | (EmptyVarConstDeclList) /* epsilon */
                ;

VarConstDecl ::= (VarConstDeclVar) VarDecl
               | (VarConstDeclConst) ConstDecl
               ;

VarDecl ::= (VarDeclList) Type:varType VarNames SEMI
          | (VarDeclListError) error SEMI:l
                {: parser.report_error("Losa deklaracija promenljivih", lleft); :}
          ;

VarNames ::= (VarNameList) VarNames COMMA VarName
           | (VarNameElement) VarName
           ;

VarName ::= (SingularVarName) IDENT:varName
          | (ArrayVarName) IDENT:varName LBRACKET RBRACKET
          | (VarNameError) error:l
                {: parser.report_error("Lose ime promenljive ili parametra", lleft); :}
          ;

ConstDecl ::= (ConstDeclList) CONST Type:varType ConstAssigns SEMI
            | (ConstDeclListError) CONST error SEMI:l
                {: parser.report_error("Losa deklaracija konstanti", lleft); :}
            ;

ConstAssigns ::= (ConstAssignList) ConstAssigns COMMA ConstAssign
               | (ConstAssignElement) ConstAssign
               ;

ConstAssign ::= (ConstAssignmentNum) IDENT:constName ASSIGN NUMBER
              | (ConstAssignmentChar) IDENT:constName ASSIGN CHARLIT
              | (ConstAssignmentBool) IDENT:constName ASSIGN BOOLLIT
              | (ConstAssignError) error:l
                    {: parser.report_error("Losa deklaracija konstante", lleft); :}
              ;

MethodDecls ::= (MethodDeclList) MethodDecls MethodDecl
              | (EmptyMethodDeclList) /* epsilon */
              ;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN MethodVarDecls LBRACE Statements RBRACE
              ;

MethodTypeName ::= (MethodTypeName) ReturnType IDENT:methodName
                 ;

ReturnType ::= (NonVoidReturnType) Type
             | (VoidReturnType) VOID
             ;

FormPars ::= (FormParList) FormPar FormParMore
           | (FormParsError) error:l
                {: parser.report_error("Losa deklaracija formalnih parametara", lleft); :}
           | (NoFormPars) /* epsilon */
           ;

FormPar ::= (FormPar) Type:parType VarName
          ;

FormParMore ::= (FormParMoreElement) COMMA FormPar FormParMore
              | (EmptyFormParMore) /* epsilon */
              ;

MethodVarDecls ::= (MethodVarDeclList) MethodVarDecls VarDecl
                 | (EmptyMethodVarDeclList) /* epsilon */
                 ;

Statements ::= (StatementList) Statements Statement
             | (EmptyStatementList) /* epsilon */
             ;

Statement ::= (MatchedStmt) Matched
            | (UnmatchedStmt) Unmatched
            ;

Matched ::= (DesignatorStmt) DesignatorStatement SEMI
          | (PrintStmt) PRINT LPAREN Expr PrintArg RPAREN SEMI
          | (ReadStmt) READ LPAREN Designator RPAREN SEMI
          | (ReturnStmt) RETURN Expr SEMI
          | (EmptyReturnStmt) RETURN Semi
          | (StatementBlock) LBRACE Statements RBRACE
          | (WhileStmt) WhileStart Statement WHILE LPAREN Condition RPAREN SEMI
          | (BreakStmt) BREAK Semi
          | (ContinueStmt) CONTINUE Semi
          | (MatchedIfElseStmt) IfStart LPAREN Condition RPAREN Matched Else Matched
          | (YieldStmt) YIELD Expr SEMI
          | (ErrorStmt) error SEMI:l
                {: parser.report_error("Iskaz ne moze biti prepoznat", lleft); :}
          ;

/* HACK:
   For some reason the parser
   doesn't set the line if there
   are no nonterminals */
Semi ::= (Semi) SEMI
      ;

WhileStart ::= (WhileStart) DO
             ;

Unmatched ::= (UnmatchedIfStmt) IfStart LPAREN Condition RPAREN Statement
            | (UnmatchedIfElseStmt) IfStart LPAREN Condition RPAREN Matched Else Unmatched
            ;

IfStart ::= (IfStart) IF
          ;

Else ::= (Else) ELSE
       ;

PrintArg ::= (PrintWidth) COMMA NUMBER:width
           | (NoPrintArg) /* epsilon */
           ;

DesignatorStatement ::= (AssignmentStmt) AssignmentStatement
                      | (IncrementStmt) Designator INCREMENT
                      | (DecrementStmt) Designator DECREMENT
                      | (MethodCallStmt) MethodCall
                      ;

AssignmentStatement ::= (SingleAssignmentStmt) Designator ASSIGN Expr
                      | (DoubleAssignmentStmt) Designator ASSIGN AssignmentStatement
                      ;

MethodCall ::= (MethodCall) Designator LPAREN ActPars RPAREN
             ;

Designator ::= (SingularDesignator) IDENT:name
             | (ArrayDesignator) ArrayName LBRACKET Expr:index RBRACKET
             ;

ArrayName ::= (ArrayName) IDENT:name
            ;

ActPars ::= (ActParList) ActPar ActParsMore
          | (NoActPars) /* epsilon */
          ;

ActParsMore ::= (ActParsMoreElement) COMMA ActPar ActParsMore
              | (EmptyActParsMore) /* epsilon */
              ;

ActPar ::= (ActPar) Expr
         ;

Type ::= (Type) IDENT:typeName
       ;

Expr ::= (SingleExpression) Term
       | (MultiExpression) Term Addop Terms
       | (SingleExpressionWithNegation) Negation Term
       | (MultiExpressionWithNegation) Negation Term Addop Terms
       | (SwitchExpr) SwitchStart LPAREN Expr RPAREN LBRACE Cases DefaultStart COLON Statements RBRACE
       ;

DefaultStart ::= (DefaultStart) DEFAULT
               ;

SwitchStart ::= (SwitchStart) SWITCH
              ;

Cases ::= (CaseList) Cases Case
        | (EmptyCaseListElement) /* epsilon */
        ;

Case ::= (Case) CaseStart NUMBER COLON Statements
       ;

CaseStart ::= (CaseStart) CASE
            ;

Negation ::= (Negation) MINUS
           ;

Terms ::= (TermList) Terms Addop Term
        | (TermListElement) Term
        ;

Term ::= (FactorListTerm) Term Mulop Factor
       | (FactorTerm) Factor
       ;

Factor ::= (DesignatorFctr) Designator
         | (NumConstFctr) NUMBER
         | (CharConstFctr) CHARLIT
         | (BoolConstFctr) BOOLLIT
         | (ExprFctr) LPAREN Expr RPAREN
         | (ArrayInitFctr) NEW Type LBRACKET Expr RBRACKET
         | (MethodCallFctr) MethodCall
         ;

Addop ::= (Plus) PLUS
        | (Minus) MINUS
        ;

Mulop ::= (Multiple) MULTIPLE
        | (Divide) DIVIDE
        | (Modulo) MODULO
        ;

Condition ::= (ConditionList) Condition Or CondTerm
            | (ConditionListElement) CondTerm
            | (ConditionError) error:l
                {: parser.report_error("Los logicki izraz", lleft); :}
            ;

CondTerm ::= (CondTermList) CondTerm And CondFact
           | (CondTermElement) CondFact
           ;

Or ::= (Or) OR
     ;

And ::= (And) AND
      ;

CondFact ::= (CondFactRelop) Expr:e1 Relop Expr:e2
           | (CondFactSingle) Expr
           ;

Relop ::= (Equal) EQ
        | (NotEqual) NEQ
        | (GreaterThan) GT
        | (LesserThan) LT
        | (GreaterEqual) GEQ
        | (LesserEqual) LEQ
        ;
